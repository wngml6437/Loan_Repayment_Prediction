# -*- coding: utf-8 -*-
"""previous-application.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17VXDstHof56H3v95KvfUHBpNjr9Q3iM9
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import os
import re
from scipy import stats
from scipy.stats import norm, skew
import matplotlib
import matplotlib.pyplot as plt # for plotting
# %matplotlib inline
import seaborn as sns # for making plots with seaborn
color = sns.color_palette()
import warnings
warnings.filterwarnings('ignore') # Suppress warnings

# importing the datasets into Pandas dataframes
data_test = pd.read_csv('../input/home-credit-default-risk/application_test.csv')
df_test = data_test.copy()
data_train = pd.read_csv('../input/home-credit-default-risk/application_train.csv')
df_train = data_train.copy()
df_previous = pd.read_csv('../input/home-credit-default-risk/previous_application.csv')

pd.set_option('display.max_rows', None)
# pd.options.display.max_rows = 60
pd.set_option('display.max_columns', None)

df_previous.dtypes

df_previous2 = df_previous.select_dtypes(exclude = 'object').copy()

df_previous2.head()

df_previous2.columns.values

df_previous2.drop(['HOUR_APPR_PROCESS_START','SK_ID_PREV'], axis=1, inplace=True)

df_previous2.columns.values

df_previous2.shape

df_previous2.head()

# prev_agg = df_previous2.drop(columns=['AMT_ANNUITY']).groupby('SK_ID_CURR', as_index=False).agg(['mean','min','max','sum']).reset_index()
# prev_agg.head()

prev_agg = df_previous2[['SK_ID_CURR', 'AMT_ANNUITY', 'AMT_APPLICATION', 'AMT_CREDIT',
       'AMT_DOWN_PAYMENT', 'AMT_GOODS_PRICE', 'NFLAG_LAST_APPL_IN_DAY',
       'RATE_DOWN_PAYMENT', 'RATE_INTEREST_PRIMARY',
       'RATE_INTEREST_PRIVILEGED', 'DAYS_DECISION', 'SELLERPLACE_AREA',
       'CNT_PAYMENT', 'DAYS_FIRST_DRAWING', 'DAYS_FIRST_DUE',
       'DAYS_LAST_DUE_1ST_VERSION', 'DAYS_LAST_DUE', 'DAYS_TERMINATION','NFLAG_INSURED_ON_APPROVAL']].groupby(['SK_ID_CURR'], as_index=False).agg(['mean','min','max','sum']).reset_index()

prev_agg.head()

prev_agg.shape

prev_agg.to_csv('previous_numerical.csv', header=True, index=False)

