# -*- coding: utf-8 -*-
"""remove-outlier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TmHr-ZdiPSOlccRxIBM8CanhiOwZcF_N
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import os
import re
from scipy import stats
from scipy.stats import norm, skew
import matplotlib
import matplotlib.pyplot as plt # for plotting
# %matplotlib inline
import seaborn as sns # for making plots with seaborn
color = sns.color_palette()
import warnings
warnings.filterwarnings('ignore') # Suppress warnings

# importing the datasets into Pandas dataframes
data_test = pd.read_csv('../input/final-csv/test_corr_removed(50 0.7).csv')
df_test = data_test.copy()
data_train = pd.read_csv('../input/final-csv/train_corr_removed(50 0.7).csv')
df_train = data_train.copy()

pd.set_option('display.max_rows', None)
# pd.options.display.max_rows = 60
pd.set_option('display.max_columns', None)

df_train.describe()

def get_outlier(df=None, column=None, weight=1.5):
  # target 값과 상관관계가 높은 열을 우선적으로 진행
  quantile_25 = np.percentile(df_train[column].values, 25)
  quantile_75 = np.percentile(df_train[column].values, 75)

  IQR = quantile_75 - quantile_25
  IQR_weight = IQR*weight
  
  lowest = quantile_25 - IQR_weight
  highest = quantile_75 + IQR_weight
  
  outlier_idx = df_train[column][ (df_train[column] < lowest) | (df_train[column] > highest) ].index
  return outlier_idx

def find_outlier(df=None, column=None, weight=1.5):
  # target 값과 상관관계가 높은 열을 우선적으로 진행
  quantile_25 = np.percentile(df_train[column].values, 25)
  quantile_75 = np.percentile(df_train[column].values, 75)

  IQR = quantile_75 - quantile_25
  IQR_weight = IQR*weight
  
  lowest = quantile_25 - IQR_weight
  highest = quantile_75 + IQR_weight
  
  outlier_idx = df_train[column][ (df_train[column] < lowest) | (df_train[column] > highest) ].index
  print(len(outlier_idx))
  df_train.drop(outlier_index, axis=0, inplace=True)
  print(df_train.shape)
  return df_train

# find_outlier(df_train, )

df_train.boxplot(figsize=(150, 45))
plt.show()

df_train2 = df_train.select_dtypes(exclude = 'object').copy()

df_train2.columns.values

df_train2.shape

df_train.shape

df_train2.columns[2]

df_train2.shape[1]

for i in range(df_train2.shape[1]):
    fig, axes = plt.subplots(1, 1, figsize=(6,4))
    bp = df_train2.boxplot(column=df_train2.columns[i])
    bp.set_title(df_train2.columns[i])
    plt.show()

# 함수 사용해서 이상치 값 삭제
# outlier_idx = get_outlier(df=df_train, column='CNT_CHILDREN', weight=7.0)
# df_train.drop(outlier_idx, axis=0, inplace=True)